{
  "name": "buster-syntax",
  "version": "0.4.3",
  "description": "[![Build status](https://secure.travis-ci.org/busterjs/buster-syntax.png?branch=master)](http://travis-ci.org/busterjs/buster-syntax)",
  "homepage": "http://busterjs.org/docs/syntax",
  "author": {
    "name": "Christian Johansen",
    "email": "christian@cjohansen.no",
    "url": "http://cjohansen.no"
  },
  "contributors": [
    {
      "name": "Stein Magnus Jodal",
      "email": "stein.magnus@jodal.no",
      "url": "http://jodal.no"
    }
  ],
  "main": "./lib/buster-syntax",
  "repository": {
    "type": "git",
    "url": "https://github.com/busterjs/buster-syntax.git"
  },
  "scripts": {
    "test": "node run-tests.js",
    "test-debug": "node --debug-brk run-tests.js"
  },
  "dependencies": {
    "uglify-js": "~1.2.5",
    "jsdom": "~0.10"
  },
  "optionalDependencies": {
    "jsdom": "~0.10"
  },
  "devDependencies": {
    "sinon": "*",
    "referee": "*",
    "buster-test": "*",
    "buster-analyzer": ">=0.4",
    "buster-configuration": ">=0.6.0"
  },
  "readme": "# buster-syntax\n\n[![Build status](https://secure.travis-ci.org/busterjs/buster-syntax.png?branch=master)](http://travis-ci.org/busterjs/buster-syntax)\n\n> Stop syntax errors before they hit the browser\n\n`buster-syntax` is an API for syntax checking JavaScript in Node.JS. It also\nprovides a Buster.JS extension that syntax checks files on the server before\nrunning them in the browser (over `ramp`).\n\nCatching errors early with Buster.JS test runs has one primary goal: Avoid\nbrowsers with poor error handling freezing if a test run contains lots of\nerrors. As a pleasant side-effect, you get consistent and detailed syntax\nerrors, regardless of target browser.\n\nThis extension ships with Buster.JS by default, so there's nothing to do to\nenable it. If you want to do test runs in the browser without this extension,\nyou have to provide your own runner plumbing, see `buster docs\n<http://github.com/busterjs/buster/>`_ for information on how.\n\n\n## API Docs\n\nTo syntax check some JavaScript, require the module and call its `check`\nmethod. It returns an object with details about the validity.\n\n\n### `check(script[, file])`\n\nSyntax check the code with the optional file name. The file name is used to\ncreate nice error messages.\n\n```javascript\nvar syntax = require(\"buster-syntax\").syntax;\n\n// Syntactically valid\nsyntax.check(\"var a = 42;\"); // => { ok: true }\n\n// Syntactically invalid\nsyntax.check(\"var a 42;\"); // => {\n  ok: false,\n  errors:\n    [ { file: null,\n        type: 'Syntax error',\n        message: 'Unexpected token: num (42)',\n        line: 1,\n        col: 7,\n        content: 'var a 42;' } ] }\n\n\n// Syntactically invalid, with file name\nsyntax.check(\"var a 42;\", \"life.js\"); // => {\n  ok: false,\n  errors:\n    [ { file: \"life.js\",\n        type: 'Syntax error',\n        message: 'Unexpected token: num (42)',\n        line: 1,\n        col: 7,\n        content: 'var a 42;' } ] }\n```        \n\n\n### `configure(options)`\n\nConfigures the syntax checker and returns a specialized instance (i.e., it does\nnot change the module instance). Currently only one configuration property is\nsupported: `ignoreReferenceErrors`. References typically require more than one\nfile to be viewed as one unit. If you just want to syntax check one file that\ncontains references to external identifiers, you can choose to not fail on those\nunknown references.\n\n```javascript\nvar syntax = require(\"buster-syntax\").syntax;\n\nsyntax.check(\"$('li').on('click', function() {})\"); // => {\n  ok: false,\n  errors:\n    [ { file: null,\n        type: 'Syntax error',\n        message: 'Unexpected token punc, expected punc',\n        line: 1,\n        col: 30,\n        content: '$(\\'li\\').on(\\'click\\', function {})' } ] }\n\nvar checker = syntax.configure({ ignoreReferenceErrors: true });\nchecker.check(\"$('li').on('click', function() {})\"); // => { ok: true }\n```\n\n\n## Changelog\n\n**0.4.3** (06.06.2014)\n\n* JsDom updated to version ~0.10 for issue [#410 - Buster is modifying the global `Error` object (via old JSDOM)](https://github.com/busterjs/buster/issues/410)\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/busterjs/buster-syntax/issues"
  },
  "_id": "buster-syntax@0.4.3",
  "_shasum": "ae42514e0eac83d89075a706a7e5bb900570b073",
  "_from": "buster-syntax@0.4.3",
  "_resolved": "https://registry.npmjs.org/buster-syntax/-/buster-syntax-0.4.3.tgz"
}
